### admin login


POST {{host}}/api/auth/login
Content-Type: application/json

{
  "login": "admin",
  "password": "password"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
  client.global.set("token", response.body.token);
});
%}

### moderator login

POST {{host}}/api/auth/login
Content-Type: application/json

{
  "login": "moderator",
  "password": "password"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
  client.global.set("token", response.body.token);
});
%}

### user login

POST {{host}}/api/auth/login
Content-Type: application/json

{
  "login": "user",
  "password": "password"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
  client.global.set("token", response.body.token);
});
%}

### new user

POST {{host}}/api/auth/login
Content-Type: application/json

{
  "login": "newUser",
  "password": "newPassword"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
  client.global.set("token", response.body.token);
});
%}

### password

POST {{host}}/api/auth/password
Content-Type: application/json

{
  "login": "admin",
  "password": "password",
  "secret" : "secret"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
});
%}

### registration client

POST {{host}}/api/auth/register
Content-Type: application/json

{
  "login": "mabel",
  "password": "Dipper",
  "secret" : "gravityfalls",
  "roles" : ["ROLE_USER"]
}

> {%
  client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
});
%}

### registration moderator

POST {{host}}/api/auth/register
Content-Type: application/json

{
  "login": "moder",
  "password": "password",
  "secret" : "most common password in the world",
  "roles" : ["ROLE_MODERATOR"]
}

> {%
  client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
});
%}

### restore
POST {{host}}/api/auth/restore
Content-Type: application/json

{
  "login" : "admin",
  "password" : "password",
  "secret" : "secret"
}

### registration moderator

POST {{host}}/api/auth/register
Content-Type: application/json

{
  "login": "moderator",
  "password": "password",
  "secret" : "secret",
  "roles" : ["ROLE_MODERATOR"]
}

> {%
  client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
});
%}

### delete

POST {{host}}/api/auth/delete
Authorization: {{token}}
Content-Type: application/json

{
  "password" : "moderator"
}

### login admin

POST {{host}}/api/auth/login
Content-Type: application/json

{
  "login": "admin",
  "password": "password"
}

> {%
client.test("Request executed successfully", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.contentType.mimeType === "application/json", "Response Content-Type is not application/json");
  client.global.set("token", response.body.token);
});
%}

### logout

POST {{host}}/api/auth/logout
Content-Type: application/json
Authorization: {{token}}
